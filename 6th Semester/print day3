      program Simpson_sine_function
            implicit none
            real :: a, b, h, f, s, s1, s2, s_odd, s_even, exact
            integer :: i, n, k
            open(unit = 11, file = 'simpsine.in')
            open(unit = 22, file = 'simpsine.out')
            write(22, 1)"method value       integration value"
1	      format(a)
            do k = 1, 15 
                  read(11, 2) a, b, n
2                 format(f4.1, f5.1, i5)
                  a = a / 180.0 * acos(-1.0)
                  b = b / 180.0 * acos(-1.0)
                  s = f(a) + f(b)
                  h = (b-a) / n
                  s_odd = 0
                  do i = 1 , (n) / 2
                        s_odd = s_odd + 4 * f(a + (2 * i - 1) * h)
                  end do
                  s_even = 0
                  do i = 1 , (n - 2) / 2
                        s_even = s_even + 2 * f(a + 2 * i * h)
                  end do 
                  exact = (sin(b) - sin(a))
                  s1 = s + s_odd + s_even
                  s2 = h * s1 / 3
                  exact = - (cos(b) - cos(a))
                  
                  write(22,3)s2, exact
3                 format(1x, f8.5, 14x, f8.5)              
            end do 
            stop
            end

            real function f(x)
            real :: x, n, test, term, sum
            sum = x
            term = x
            test = 1e-6
            n = 0
            do while (abs(term) .gt. test)
                  term = - term * (x**2) / ((2 * n + 2) * (2 * n + 3))
                  sum = sum + term
                  n = n + 1
            end do
            f = sum 
            return 
            end




0.0 180.0 10
0.0 180.0 50
0.0 180.0 100
0.0 180.0 500
0.0 180.0 100000
0.0 90.0 10
0.0 90.0 50
0.0 90.0 100
0.0 90.0 500
0.0 90.0 1000
60.0 270.0 10
60.0 270.0 50
60.0 270.0 100
60.0 270.0 500
60.0 270.0 1000






method value       integration value
  2.00011               2.00000
  2.00000               2.00000
  2.00000               2.00000
  2.00000               2.00000
  2.00000               2.00000
  1.00000               1.00000
  1.00000               1.00000
  1.00000               1.00000
  1.00000               1.00000
  1.00000               1.00000
  0.50005               0.50000
  0.50000               0.50000
  0.50000               0.50000
  0.50000               0.50000
  0.50000               0.50000




      program Simpson_cosine_function
            implicit none
            real :: a, b, h, f, s, s1, s2, s_odd, s_even, exact
            integer :: i, n, k
            open(unit = 11, file = 'simpcos.in')
            open(unit = 22, file = 'simpcos.out')
            write(22, 1)"method value       integration value"
1           format(a)
            do k = 1, 15
                  read(11, 2) a, b, n
2                 format(f4.1, f5.1, i5)
                  a = a / 180.0 * acos(-1.0)
                  b = b / 180.0 * acos(-1.0)
                  s = f(a) + f(b)
                  h = (b - a) / n
                  s_odd = 0
                  do i = 1 , (n) / 2
                        s_odd = s_odd + 4 * f(a + (2 * i - 1) * h)
                  end do
                  s_even = 0
                  do i = 1 , (n - 2) / 2
                        s_even = s_even + 2 * f(a + 2 * i * h)
                  end do 
                  exact = (sin(b) - sin(a))
                  s1 = s + s_odd + s_even
                  s2 = h * s1 / 3
                  write(22, 3)s2, exact
3                 format(1x, f8.5, 14x, f8.5)
            end do 
            stop
            end

            real function f(x)
            real :: x, n, test, term, sum
            sum= 1
            term = 1
            test = 1e-6
            n = 1
            do while (abs(term).gt.test)
                  term = - term * (x**2) / ((2 * n) * (2 * n - 1))
                  sum = sum + term
                  n = n + 1
            end do
            f = sum 
            return 
            end




0.0 180.0 10
0.0 180.0 50
0.0 180.0 100
0.0 180.0 500
0.0 180.0 1000
0.0 90.0 10
0.0 90.0 50
0.0 90.0 100
0.0 90.0 500
0.0 90.0 1000
60.0 270.0 10
60.0 270.0 50
60.0 270.0 100
60.0 270.0 500
60.0 270.0 1000






method value       integration value
 -0.00000              -0.00000
 -0.00000              -0.00000
 -0.00000              -0.00000
  0.00000              -0.00000
 -0.00000              -0.00000
  1.00000               1.00000
  1.00000               1.00000
  1.00000               1.00000
  1.00000               1.00000
  1.00000               1.00000
 -1.86621              -1.86603
 -1.86603              -1.86603
 -1.86603              -1.86603
 -1.86603              -1.86603
 -1.86603              -1.86603




      program Simpson_exponential_function
            implicit none
            real :: a, b, h, f, s, s1, s2, s_odd, s_even
            integer :: i, n, k
            open(unit = 11, file = 'simpexp.in')
            open(unit = 22, file = 'simpexp.out')
            write(22, 1)"integration value"
1		format(a)
            do k = 1, 15 
                  read(11, 2) a, b, n
2                 format(f4.1, f3.1, i4)
                  s = f(a) + f(b)
                  h = (b - a) / n
                  s_odd = 0
                  do i = 1 , (n) / 2
                        s_odd = s_odd + 4 * f(a + (2 * i - 1) * h)
                  end do
                  s_even = 0
                  do i = 1 , (n - 2) / 2
                        s_even = s_even + 2 * f(a + 2 * i * h)
                  end do 
                  s1 = s + s_odd + s_even
                  s2 = h * s1 / 3
                  write(22, 3)s2
3                 format(1x, f8.5)              
            end do 
            stop
            end

            real function f(x)
            real :: x
            f = x * exp(- x**2) 
            return 
            end




0.0 2.0 10
0.0 2.0 50
0.0 2.0 100
0.0 2.0 500
0.0 2.0 1000
-2.0 2.0 10
-2.0 2.0 50
-2.0 2.0 100
-2.0 2.0 500
-2.0 2.0 1000
-3.0 0.0 10
-3.0 0.0 50
-3.0 0.0 100
-3.0 0.0 500
-3.0 0.0 1000



integration value
  0.49089
  0.49084
  0.49084
  0.49084
  0.49084
  0.00000
  0.00000
  0.00000
  0.00000
  0.00000
 -0.50024
 -0.49994
 -0.50024
 -0.49994
 -0.50024




      program Simpson_quadratic_function
            implicit none
            real :: a, b, h, f, s, s1, s2, s_odd, s_even, exact
            integer :: i, n, k
            open(unit = 11, file = 'simpquad.in')
            open(unit = 22, file = 'simpquad.out')
            write(22, 1)"integration value"
1		format(a)
            do k = 1, 10
                  read(11, 2) a, b, n
2                 format(f4.1, f3.1, i4)
                  s = f(a) + f(b)
                  h = (b-a) / n
                  s_odd = 0
                  do i = 1 , (n) / 2
                        s_odd = s_odd + 4 * f(a + (2 * i - 1) * h)
                  end do
                  s_even = 0
                  do i = 1 , (n - 2) / 2
                        s_even = s_even + 2 * f(a + 2 * i * h)
                  end do 
                  exact = (sin(b) - sin(a))
                  s1 = s + s_odd + s_even
                  s2 = h * s1 / 3
                  write(22, 3)s2
3                 format(1x, f8.5)              
            end do 
            stop
            end

            real function f(x)
            real :: x
            f = (x**2) + 5
            return 
            end




-3.0 4.0 10
-3.0 4.0 50
-3.0 4.0 100
-3.0 4.0 500
-3.0 4.0 1000
1.0 3.0 10
1.0 3.0 50
1.0 3.0 100
1.0 3.0 500
1.0 3.0 1000



integration value
 65.33334
 65.33334
 65.33334
 65.33334
 65.33334
 18.66667
 18.66667
 18.66667
 18.66667
 18.66667




      program Simpson_inverse_function
            implicit none
            real :: a, b, h, f, s, s1, s2, s_odd, s_even, exact
            integer :: i, n, k
            open(unit = 11, file = 'simpinv.in')
            open(unit = 22, file = 'simpinv.out')
            write(22, 1)"method value   integration value"
1		format(a)
            do k = 1, 3
                  read(11,2) a, b, h
2                 format(f3.1, 1x, f3.1, 1x, f5.3)
                  s = f(a) + f(b)
                  n = (b - a) / h
                  s_odd = 0
                  do i = 1 , (n) / 2
                        s_odd = s_odd + 4 * f(a + (2 * i - 1) * h)
                  end do
                  s_even = 0
                  do i = 1 , (n - 2) / 2
                        s_even = s_even + 2 * f(a + 2 * i * h)
                  end do 
                  exact = (sin(b) - sin(a))
                  s1 = s + s_odd + s_even
                  s2 = h * s1 / 3
                  exact = atan(2.0*2) / 2.0  - atan(2.0*0) / 2.0
                  write(22, 3)s2, exact
3                 format(1x, f8.5, 8x, f8.5)              
            end do 
            stop
            end

            real function f(x)
            real :: x
            f = 1 / (1 + 4 * x**2)
            return 
            end




0.0 2.0 0.05
0.0 2.0 0.01
0.0 2.0 0.001




method value   integration value
  0.64526         0.66291
  0.65938         0.66291
  0.66244         0.66291




      program Simpson_transcendental_function
            implicit none
            real :: a, b, h, f, g, s, s1, s2, s_odd, s_even, exact
            integer :: i, n, k
            open(unit = 11, file = 'simpfunc.in')
            open(unit = 22, file = 'simpfunc.out')
            write(22, 1)"method value   integration value"
1		format(a)
            do k = 1, 3
                  read(11,2) a, b, h
2                 format(f3.1, 1x, f3.1, 1x, f6.4)
                  b = b * acos(-1.0)
                  s1 = f(a) + f(b)
                  n = (b-a) / h
                  s_odd = 0
                  do i = 1 , (n) / 2
                        s_odd = s_odd + 4 * f(a + (2 * i - 1) * h)
                  end do
                  s_even = 0
                  do i = 1 , (n - 2) / 2
                        s_even = s_even + 2 * f(a + 2 * i * h)
                  end do 
                  exact = (sin(b) - sin(a))
                  s1 = s + s_odd + s_even
                  s2 = h * s1 / 3
                  exact =  g(b) - g(a)
                  write(22,3)s2, exact
3                 format(1x, f8.5, 8x, f8.5)              
            end do 
            stop
            end

            real function f(x)
            real :: x
            f = sin(x) + (cos(2*x))**2
            return 
            end

            real function g(x)
            real :: x
            g = (1.0/8.0) * (4 * x + sin(4*x) - 8 * cos(x))
            return 
            end
            




0.0 2.0 0.001
0.0 2.0 0.005
0.0 2.0 0.0001




method value   integration value
  3.13974         3.14159
  3.13508         3.14159
  3.14134         3.14159




c            Program for finding the root of a quadratic expression using Newton-Raphson Method
            program Newton_Raphson Method for quadratic expression
            implicit none
            real ::  root, a, b, h, x0, test, f
            integer :: n 
            open(unit = 11, file = "quadroot.in")
            open(unit = 22, file = "quadroot.out")
            read(11, 1)a, b, h
1           format(f5.1, 1x, f4.1, 1x, f3.1)            
            do while(a .lt. b)
                  test = f(a) * f(a + h)
                  if (test .lt. 0) then 
                        x0 = a
                        call newton(a, root, n)
                  end if
                  a = a + h
            end do
            
            contains
            subroutine newton(x0, root, n)
                  implicit none
                  real :: x0, x1, f, df
                  real :: error, tol, root
                  integer :: n
                  n = 1
                  tol =  5e-8
2                 x1 = x0 - f(x0)/df(x0)
                  write(22, 3)x1 ,"after", n, "iteration"
3                 format(f10.7, 1x, a, i3, 1x, a)            
                  error = abs(x1 - x0)
                  if (error .lt. tol) then
                        root = x1
                  else
                        n = n + 1
                        x0 = x1 
                        goto 2
                  end if
                  write(22, 4) "The root is :", root
4                 format(a, 1x, f10.7)
                  write(22, 5)"after", n, "iterations"
5                 format(5x, a, i3, 1x, a)      
            end subroutine            
      end program

      real function f(x)
            implicit none
            real :: x
            f = x ** 2 + 4 * x - 5
      end function

      real function df(x)
            implicit none
            real :: x, h, f
            h = 1e-5
            df = (f(x + h) - f(x)) / h
      end function





-10.0 10.0 0.2



-5.0000000 after  1 iteration
-5.0000000 after  2 iteration
The root is : -5.0000000
     after  2 iterations
 1.0000000 after  1 iteration
 1.0000000 after  2 iteration
The root is :  1.0000000
     after  2 iterations




c     Program for finding the root of a cubic expression using Newton-Raphson Method
           program Newton_Raphson Method for cubic expression
            implicit none
            real ::  root, a, b, h, x0, test, f
            integer :: n 
            open(unit = 11, file = "cubicroot.in")
            open(unit = 22, file = "cubicroot.out")
            read(11, 1)a, b
1           format(f5.1, 1x, f4.1, 1x, f3.1)            
            do while(a .lt. b)
                  test = f(a) * f(a + h)
                  if (test .lt. 0) then 
                        x0 = a
                        call newton(a, root, n)
                  end if
                  a = a + h
            end do
            
            contains
                        
      end program

      real function f(x)
            implicit none
            real :: x
            f = x ** 3 + 6 * x **2 + 11 * x + 6
            return
      end function

      real function df(x)
            implicit none
            real :: x, h, f
            h = 1e-5
            df = (f(x + h) - f(x)) / h
            return
      end function


      subroutine newton(x0, root, n)
            implicit none
            real :: x0, x1, f, df
            real :: error, tol, root
            integer :: n
            n = 1
            tol =  5e-8
2                 x1 = x0 - f(x0)/df(x0)
                  write(22, 3)x1 ,"after", n, "iteration"
3                 format(f10.7, 1x, a, i3, 1x, a)            
            error = abs(x1 - x0)
            if (error .lt. tol) then
                  root = x1
            else
                  n = n + 1
                  x0 = x1 
		      goto 2
            end if
            
            write(22, 4) "The root is :", root
4                 format(a, 1x, f10.7)
            write(22, 5)"after", n, "iterations"
5                 format(5x, a, i3, 1x, a)      
      end subroutine




-10.0 10.0 0.2




-2.9999990 after  1 iteration
-3.0000000 after  2 iteration
-3.0000000 after  3 iteration
The root is : -3.0000000
     after  3 iterations
-1.9999998 after  1 iteration
-2.0000007 after  2 iteration
-2.0000007 after  3 iteration
The root is : -2.0000007
     after  3 iterations
-1.0000000 after  1 iteration
-1.0000000 after  2 iteration
The root is : -1.0000000
     after  2 iterations




c            Program for finding the root of a Sine Function using Newton-Raphson Method
      program Newton_Raphson Method for Sine_Function
            implicit none
            real ::  root, a, b, h, x0, test, f
            integer :: n 
            open(unit = 11, file = "sineroot.in")
            open(unit = 22, file = "sineroot.out")
            read(11, 1)a, b, h
1           format(f5.1, 1x, f4.1, 1x, f3.1)            
            do while(a .lt. b)
                  test = f(a) * f(a + h)
                  if (test .lt. 0) then 
                        x0 = a
                        call newton(a, root, n)
                  end if
                  a = a + h
            end do
            
            contains
            subroutine newton(x0, root, n)
                  implicit none
                  real :: x0, x1, f, df, pi
                  real :: error, tol, root
                  integer :: n, root_value
                  parameter (pi = acos(- 1.0))
                  n = 1
                  tol =  5e-8
2                 x1 = x0 - f(x0)/df(x0)
                  write(22, 3)x1 ,"after", n, "iteration"
3                 format(f10.7, 1x, a, i3, 1x, a)            
                  error = abs(x1 - x0)
                  if (error .lt. tol) then
                        root = x1
                        root_value = root / pi
                  else
                        n = n + 1
                        x0 = x1 
                        goto 2
                  end if
                  write(22, 4) "The root is :", root_value, " times π"
4                 format(a, 1x, i2, a)
                  write(22, 5)"after", n, "iterations"
5                 format(5x, a, i3, 1x, a)      
            end subroutine            
      end program

      real function f(x)
            implicit none
            real :: x
            f = sin(x)
      end function

      real function df(x)
            implicit none
            real :: x, h, f
            h = 1e-5
            df = (f(x + h) - f(x)) / h
      end function





-10.0 10.0 0.2



-9.4143038 after  1 iteration
-9.4252872 after  2 iteration
-9.4247532 after  3 iteration
-9.4247789 after  4 iteration
-9.4247780 after  5 iteration
-9.4247780 after  6 iteration
The root is : -3 times π
     after  6 iterations
-6.2823658 after  1 iteration
-6.2831841 after  2 iteration
-6.2831855 after  3 iteration
-6.2831855 after  4 iteration
The root is : -2 times π
     after  4 iterations
-3.1407733 after  1 iteration
-3.1415915 after  2 iteration
-3.1415927 after  3 iteration
-3.1415927 after  4 iteration
The root is : -1 times π
     after  4 iterations
 0.0008194 after  1 iteration
 0.0000000 after  2 iteration
 0.0000000 after  3 iteration
The root is :  0 times π
     after  3 iterations
 3.1421983 after  1 iteration
 3.1415935 after  2 iteration
 3.1415927 after  3 iteration
 3.1415927 after  4 iteration
The root is :  1 times π
     after  4 iterations
 6.2837911 after  1 iteration
 6.2831860 after  2 iteration
 6.2831855 after  3 iteration
 6.2831855 after  4 iteration
The root is :  2 times π
     after  4 iterations
 9.4327965 after  1 iteration
 9.4243889 after  2 iteration
 9.4247971 after  3 iteration
 9.4247770 after  4 iteration
 9.4247780 after  5 iteration
 9.4247780 after  6 iteration
The root is :  3 times π
     after  6 iterations




c            Program for finding the root of a Cosine Function using Newton-Raphson Method
      program Newton_Raphson Method for Cosine_Function
            implicit none
            real ::  root, a, b, h, x0, test, f
            integer :: n 
            open(unit = 11, file = "cosineroot.in")
            open(unit = 22, file = "cosineroot.out")
            read(11, 1)a, b, h
1           format(f5.1, 1x, f4.1, 1x, f3.1)            
            do while(a .lt. b)
                  test = f(a) * f(a + h)
                  if (test .lt. 0) then 
                        x0 = a
                        call newton(a, root, n)
                  end if
                  a = a + h
            end do
            
            contains
            subroutine newton(x0, root, n)
                  implicit none
                  real :: x0, x1, f, df, pi
                  real :: error, tol, root
                  integer :: n, root_val
                  parameter (pi = acos(- 1.0))
                  n = 1
                  tol =  5e-8
2                 x1 = x0 - f(x0)/df(x0)
                  write(22, 3)x1 ,"after", n, "iteration"
3                 format(f10.7, 1x, a, i3, 1x, a)            
                  error = abs(x1 - x0)
                  if (error .lt. tol) then
                        root = x1
                        root_val = 2 * root / pi
                  else
                        n = n + 1
                        x0 = x1 
                        goto 2
                  end if
                  write(22, 4) "The root is :", root_val, " times π/2"
4                 format(a, 1x, i2, a)
                  write(22, 5)"after", n, "iterations"
5                 format(5x, a, i3, 1x, a)      
            end subroutine            
      end program

      real function f(x)
            implicit none
            real :: x
            f = cos(x)
            return
      end function

      real function df(x)
            implicit none
            real :: x, h, f
            h = 1e-5
            df = (f(x + h) - f(x)) / h
            return
      end function





-10.0 10.0 0.2



-7.8531680 after  1 iteration
-7.8539805 after  2 iteration
-7.8539815 after  3 iteration
-7.8539815 after  4 iteration
The root is : -5 times π/2
     after  4 iterations
-4.7115698 after  1 iteration
-4.7123880 after  2 iteration
-4.7123890 after  3 iteration
-4.7123890 after  4 iteration
The root is : -3 times π/2
     after  4 iterations
-1.5699769 after  1 iteration
-1.5707952 after  2 iteration
-1.5707964 after  3 iteration
-1.5707964 after  4 iteration
The root is : -1 times π/2
     after  4 iterations
 1.5716157 after  1 iteration
 1.5707974 after  2 iteration
 1.5707964 after  3 iteration
 1.5707964 after  4 iteration
The root is :  1 times π/2
     after  4 iterations
 4.7129946 after  1 iteration
 4.7123899 after  2 iteration
 4.7123890 after  3 iteration
 4.7123890 after  4 iteration
The root is :  3 times π/2
     after  4 iterations
 7.8545871 after  1 iteration
 7.8539824 after  2 iteration
 7.8539815 after  3 iteration
 7.8539815 after  4 iteration
The root is :  5 times π/2
     after  4 iterations
